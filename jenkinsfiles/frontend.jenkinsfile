def dockerimage="sewani/frontend_microapp"
def branch="13-jenkins-pipeline-branch-commit"
def file="jenkinsfiles/frontend.jenkinsfile"
pipeline{
	agent any 
	environment{
		DOCKER_BUILD_SKIPPED=false
		Dockerhub_Credentials=credentials('dockerhub')
		//Dockerhub_Credentials=credentials('Docker')
		}
	stages{
	//	stage('check code change'){
	//		steps{
	//			script{
					//def filechanged1=sh "git diff app-front/package*.json"
					//def filechanged2=sh "git diff jenkinsfiles/frontend.jenkinsfile"
					//def filechanged1 = sh(script: "git diff app-front/package*.json", returnStdout: true).trim()
                    			//def filechanged2 = sh(script: "git diff jenkinsfiles/frontend.jenkinsfile", returnStdout: true).trim()
	//				def filechange1 = sh (script: "git diff  --name-only HEAD^..HEAD | grep \"${file}\"", returnStatus: true)
	//				echo "hi ${filechange1}"
	//				if (filechange1 == 0){
	//					echo "file changed processing with build..."
	//						}
	//				else {
	//					echo "file not changed"
	//					currentBuild.result="ABORTED"
	//					error("build aborted as there is no change is specific file")
	//				}
	//			}
	//		}
	//	}
		stage('docker build'){
					when {
						anyOf {
        						changeset "jenkinsfiles/**"
    							}
						}
					steps{
						script{
							sh "docker build -t ${dockerimage}:${branch} -f docker/frontend.Dockerfile ."
							}
						}
					}
		stage('check stage skip'){
					when{
						expression {currentBuild.changeSets.isEmpty()}
					}
					steps{
						script{
							//def csets=currentBuild.changesets
							//echo "hi ${csets}"
							env.DOCKER_BUILD_SKIPPED=true
							}
							
						}
					}
		stage('abort if skipped'){
						when{
							expression {env.DOCKER_BUILD_SKIPPED}
							}
						steps{
							script{
								echo "no change in files so abort"
								currentBuild.result="ABORTED"
                                             			error("build aborted as there is no change is specific file")
								echo "Aborted"
								}
							}
					}
		stage('docker login'){
					steps{
						script{
							sh 'echo $Dockerhub_Credentials_PSW | docker login -u $Dockerhub_Credentials_USR --password-stdin'
							}
						}
					}
		stage('docker push'){
					steps{
						script{
							sh"docker push ${dockerimage}:${branch}"
							}
						}
					}
		stage('image run'){
					steps{
						script{
							sh "docker run -itd -p 3000:3000 ${dockerimage}:${branch}"
							}
						}
					}
				}
			}
